package com.sds.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.io.Serializable;
import java.security.Key;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Base64;
import java.util.Collection;
import java.util.Date;
import java.util.function.Function;
import java.util.stream.Collectors;

@Component
public class JWToken implements Serializable {
	
	public static Key SIGN;
	public long TOKEN_VALIDATION = 18000;
	public String AUTHORITIES = "rol";
	
	private static Key generateKeyForToken() {
		SecureRandom randomNumber = new SecureRandom();
		
		byte[] bytes = new byte[36];
		
		randomNumber.nextBytes(bytes);
		
		/*Generamos una clave privada*/
		
		return Keys.hmacShaKeyFor(bytes);
	}
	
	{
		SIGN = generateKeyForToken();
	}
	
	 public <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
	        final Claims claims = getAllClaimsFromToken(token);
	        return claimsResolver.apply(claims);
	    }
	 
	 public String getUsername(String token) {
		 return getClaimFromToken(token, Claims::getSubject);
	 }
	 
	  
	 /*Obtengo el payload del token*/
	 private Claims getAllClaimsFromToken(String token) {
	        return Jwts.parser()
	                .setSigningKey(SIGN)
	                .parseClaimsJws(token)
	                .getBody();
	    
	  }
	
	public String generateToken(Authentication auth) {
		String authorities;
		
		authorities = auth.getAuthorities().stream()
				.map(GrantedAuthority::getAuthority).collect(Collectors.joining(","));
		
		String jwt = Jwts.builder()
				.setSubject(auth.getName())
				.claim(AUTHORITIES, authorities)
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + TOKEN_VALIDATION*1000))
				.signWith(SignatureAlgorithm.HS256,SIGN).compact();
		
		return jwt;
	
	}
	
	
	private Boolean hasExpirate(String token) {
		Date expirationDate = getClaimFromToken(token, Claims::getExpiration);
		return expirationDate.before(new Date());
	}
	
	public boolean validate (String token, UserDetails userDetails) {
		String username = getClaimFromToken(token, Claims::getSubject);
		return (username.equals(userDetails.getUsername()) && !hasExpirate(token));
	}
	
	
	/*Generamos la autenticacion con el token*/
	
	public UsernamePasswordAuthenticationToken getAuthenticationToken (String token, Authentication auth,
			UserDetails userDetails) {
		JwtParser parser = Jwts.parser().setSigningKey(SIGN);
		
		Jws<Claims> claimsJWS = parser.parseClaimsJws(token);
		
		Claims claims = claimsJWS.getBody();
		
		Collection<? extends GrantedAuthority> authorities =
                Arrays.stream(claims.get(AUTHORITIES).toString().split(","))
                        .map(SimpleGrantedAuthority::new)
                        .collect(Collectors.toList());
		
		return new UsernamePasswordAuthenticationToken(userDetails, " ", authorities);
	}
	