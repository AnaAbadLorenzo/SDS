package com.sds.security;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import com.tfg.ana.tfg_ana.service.impl.UsuarioServiceImpl;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.io.IOException;

public class AuthFilter extends OncePerRequestFilter {

	@Autowired
	public JWToken jwtToken;

	@Autowired
	public UsuarioServiceImpl usuarioService;

	private static final String PREFIX = "Bearer ";

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException, IOException{
		
	        String header = request.getHeader("Authorization");
	        String username = null;
	        String token = null;
	       
	        token = extractToken(request);
	        
	            try {
	                username = jwtToken.getUsername(token);
	            
	            } catch (IllegalArgumentException e) {
	                logger.error("No se ha podido extraer el usuario del token", e);
	            } catch (ExpiredJwtException e) {
	                logger.warn("Token expirado", e);
	            } catch(SignatureException e){
	                logger.error("Usuario o contrase√±a invalido.");
	            }
	        
	        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {

	            UserDetails userDetails = usuarioService.loadUserByUsername(username);

	            if (jwtToken.validate(token, userDetails)) {
	                UsernamePasswordAuthenticationToken authentication = jwtToken.getAuthenticationToken
	                		(token, SecurityContextHolder.getContext().getAuthentication(), userDetails);
	                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
	                logger.info("authenticated user " + username + ", setting security context");
	                SecurityContextHolder.getContext().setAuthentication(authentication);
	            }
	        }

	        try {
				filterChain.doFilter(request, response);
			} catch (java.io.IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ServletException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    }

	/* Extraemos el token de la cabecera de la peticion */

	private String extractToken(HttpServletRequest request) {
		String token="";
		String header = request.getHeader("Authorization");

		if (StringUtils.hasText(header)) {
			if (header.startsWith("Bearer ")) {
				token = header.substring(7, header.length());
			}
		}else {
			logger.warn("No se ha encontrado la cabecera correspondiente");
		}

		return token;
	}

}